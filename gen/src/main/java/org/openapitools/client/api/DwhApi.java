/*
 * Сервіс чатбота
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.PayerDTO;
import org.openapitools.client.model.PdvAggregateDto;
import org.openapitools.client.model.PdvDTO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DwhApi {
    private ApiClient localVarApiClient;

    public DwhApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DwhApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for getAggregateResultUsingGET
     * @param searchParam payer ipn or name (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAggregateResultUsingGETCall(String searchParam, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dwh/pdv/aggregate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (searchParam != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchParam", searchParam));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAggregateResultUsingGETValidateBeforeCall(String searchParam, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getAggregateResultUsingGETCall(searchParam, _callback);
        return localVarCall;

    }

    /**
     * getAggregateResult
     * 
     * @param searchParam payer ipn or name (optional)
     * @return PdvAggregateDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public PdvAggregateDto getAggregateResultUsingGET(String searchParam) throws ApiException {
        ApiResponse<PdvAggregateDto> localVarResp = getAggregateResultUsingGETWithHttpInfo(searchParam);
        return localVarResp.getData();
    }

    /**
     * getAggregateResult
     * 
     * @param searchParam payer ipn or name (optional)
     * @return ApiResponse&lt;PdvAggregateDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PdvAggregateDto> getAggregateResultUsingGETWithHttpInfo(String searchParam) throws ApiException {
        okhttp3.Call localVarCall = getAggregateResultUsingGETValidateBeforeCall(searchParam, null);
        Type localVarReturnType = new TypeToken<PdvAggregateDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * getAggregateResult (asynchronously)
     * 
     * @param searchParam payer ipn or name (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAggregateResultUsingGETAsync(String searchParam, final ApiCallback<PdvAggregateDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAggregateResultUsingGETValidateBeforeCall(searchParam, _callback);
        Type localVarReturnType = new TypeToken<PdvAggregateDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPayerInfoUsingGET
     * @param payerName payerName (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPayerInfoUsingGETCall(String payerName, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dwh/pdv/payer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (payerName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("payerName", payerName));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPayerInfoUsingGETValidateBeforeCall(String payerName, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'payerName' is set
        if (payerName == null) {
            throw new ApiException("Missing the required parameter 'payerName' when calling getPayerInfoUsingGET(Async)");
        }
        

        okhttp3.Call localVarCall = getPayerInfoUsingGETCall(payerName, _callback);
        return localVarCall;

    }

    /**
     * getPayerInfo
     * 
     * @param payerName payerName (required)
     * @return List&lt;PayerDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<PayerDTO> getPayerInfoUsingGET(String payerName) throws ApiException {
        ApiResponse<List<PayerDTO>> localVarResp = getPayerInfoUsingGETWithHttpInfo(payerName);
        return localVarResp.getData();
    }

    /**
     * getPayerInfo
     * 
     * @param payerName payerName (required)
     * @return ApiResponse&lt;List&lt;PayerDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PayerDTO>> getPayerInfoUsingGETWithHttpInfo(String payerName) throws ApiException {
        okhttp3.Call localVarCall = getPayerInfoUsingGETValidateBeforeCall(payerName, null);
        Type localVarReturnType = new TypeToken<List<PayerDTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * getPayerInfo (asynchronously)
     * 
     * @param payerName payerName (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPayerInfoUsingGETAsync(String payerName, final ApiCallback<List<PayerDTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPayerInfoUsingGETValidateBeforeCall(payerName, _callback);
        Type localVarReturnType = new TypeToken<List<PayerDTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPdvUsingGET
     * @param declarationNumber declarationNumber (optional)
     * @param payerIpn payerIpn (optional)
     * @param payerName payerName (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPdvUsingGETCall(String declarationNumber, String payerIpn, String payerName, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dwh/pdv";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (declarationNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("declarationNumber", declarationNumber));
        }

        if (payerIpn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("payerIpn", payerIpn));
        }

        if (payerName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("payerName", payerName));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPdvUsingGETValidateBeforeCall(String declarationNumber, String payerIpn, String payerName, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getPdvUsingGETCall(declarationNumber, payerIpn, payerName, _callback);
        return localVarCall;

    }

    /**
     * getPdv
     * 
     * @param declarationNumber declarationNumber (optional)
     * @param payerIpn payerIpn (optional)
     * @param payerName payerName (optional)
     * @return List&lt;PdvDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<PdvDTO> getPdvUsingGET(String declarationNumber, String payerIpn, String payerName) throws ApiException {
        ApiResponse<List<PdvDTO>> localVarResp = getPdvUsingGETWithHttpInfo(declarationNumber, payerIpn, payerName);
        return localVarResp.getData();
    }

    /**
     * getPdv
     * 
     * @param declarationNumber declarationNumber (optional)
     * @param payerIpn payerIpn (optional)
     * @param payerName payerName (optional)
     * @return ApiResponse&lt;List&lt;PdvDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PdvDTO>> getPdvUsingGETWithHttpInfo(String declarationNumber, String payerIpn, String payerName) throws ApiException {
        okhttp3.Call localVarCall = getPdvUsingGETValidateBeforeCall(declarationNumber, payerIpn, payerName, null);
        Type localVarReturnType = new TypeToken<List<PdvDTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * getPdv (asynchronously)
     * 
     * @param declarationNumber declarationNumber (optional)
     * @param payerIpn payerIpn (optional)
     * @param payerName payerName (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPdvUsingGETAsync(String declarationNumber, String payerIpn, String payerName, final ApiCallback<List<PdvDTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPdvUsingGETValidateBeforeCall(declarationNumber, payerIpn, payerName, _callback);
        Type localVarReturnType = new TypeToken<List<PdvDTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
